/* eslint-disable @typescript-eslint/no-misused-promises */
import Head from "next/head";
import Header from "./Header";
import Footer from "./Footer";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState, FormEvent, FormEventHandler } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "@/utils/api";
import { ScrollArea } from "@radix-ui/react-scroll-area";
import { Button } from "./ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form";
import { Input } from "./ui/input";
type LayoutProps = {
  children: React.ReactNode | JSX.Element;
};

const Layout = ({ children }: LayoutProps) => {
  // const { data: sessionData } = useSession();
  // const router = useRouter();
  const addList = api.list.createList.useMutation({
    onSuccess: () => void refecthLists(),
  });
  const { data: lists, refetch: refecthLists } = api.list.getAllLists.useQuery(
    undefined,
    { enabled: true }
  );
  const deleteList = api.list.deleteList.useMutation({
    onSuccess: () => void refecthLists(),
  });
  const [listName, setListName] = useState({ name: "" });
  const formSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    addList.mutate(listName);
    setListName({ name: "" });
  };
  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.target;
    setListName({ name: value });
  };

  const formSchema = z.object({
    name: z
      .string()
      .min(3, {
        message: "list name must be at least 3 characters long.",
      })
      .max(20),
  });
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    addList.mutate(values);
    console.log(values);
  }

  return (
    <>
      <Head>
        <title>Lists</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="flex min-h-screen flex-col items-center justify-start bg-secondary md:grid md:grid-cols-[20%_80%]">
        <ScrollArea className=" flex h-[40rem] w-full flex-col gap-3 rounded-md border p-3 shadow-md">
          {lists?.length &&
            lists?.map((list) => {
              return (
                <div key={list.id} className="flex justify-between gap-2">
                  <Button
                    asChild
                    // key={list.id}
                    className="border-accent-foreground bg-accent text-accent-foreground shadow-sm shadow-accent-foreground transition duration-300 ease-in-out hover:text-background"
                  >
                    <Link href={`/dashboard/list/${list.id}`}>{list.name}</Link>
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={() => {
                      deleteList.mutate({ id: list.id });
                      window.location.replace("/dashboard");
                    }}
                  >
                    Delete List
                  </Button>
                </div>
              );
            })}
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline">Add List</Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Add a New List</DialogTitle>
                <DialogDescription>
                  Choose a name for your new List. Click save when you are done.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <Form {...form}>
                  {/* eslint-disable-next-line @typescript-eslint/no-misused-promises */}
                  <form
                    onSubmit={form.handleSubmit(onSubmit)}
                    className="space-y-8"
                  >
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>List Name</FormLabel>
                          <FormControl>
                            <Input placeholder="item name" {...field} />
                          </FormControl>
                          <FormDescription>
                            Enter a name for your new list
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <Button type="submit">Submit</Button>
                  </form>
                </Form>
              </div>
            </DialogContent>
          </Dialog>
        </ScrollArea>
        {children}
      </main>
      <Footer />
    </>
  );
};

export default Layout;
